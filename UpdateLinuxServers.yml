---
- name: Actualización de servidores AlmaLinux con paso de variables
  hosts: all
  become: true
  gather_facts: true

  vars:
    update_status: []  # Variable para guardar el estado de cada servidor
    global_status: "success"  # Estado global del playbook

  tasks:
    - name: Iniciar registro para cada servidor
      ansible.builtin.set_fact:
        server_log: {
          "hostname": "{{ inventory_hostname }}",
          "status": "Pending",
          "actions": [],
          "reboot_required": false,
          "error": null
        }

    - name: Verificar conectividad con el servidor
      ansible.builtin.ping:
      register: ping_result
      failed_when: ping_result.ping != "pong"

    - name: Limpiar la caché de paquetes
      ansible.builtin.dnf:
        update_cache: true

    - name: Actualizar paquetes
      ansible.builtin.dnf:
        name: "*"
        state: latest
        update_cache: true
      register: update_result
      failed_when: update_result.failed or update_result.results is undefined

    - name: Registrar paquetes actualizados
      ansible.builtin.set_fact:
        server_log: "{{ server_log | combine({'status': 'Success', 'actions': update_result.results | default([])}) }}"
      when: not update_result.failed

    - name: Verificar si se necesita reinicio
      ansible.builtin.stat:
        path: "/var/run/reboot-required"
      register: reboot_check

    - name: Registrar necesidad de reinicio
      ansible.builtin.set_fact:
        server_log: "{{ server_log | combine({'reboot_required': reboot_check.stat.exists}) }}"

    - name: Reiniciar servidor si es necesario
      ansible.builtin.reboot:
      when: reboot_check.stat.exists

    - name: Registrar error en caso de fallo
      ansible.builtin.set_fact:
        server_log: "{{ server_log | combine({'status': 'Failed', 'error': 'Error during update or reboot process'}) }}"
      when: update_result.failed

    - name: Registrar el estado del servidor, incluso en caso de fallos
      block:
        - name: Guardar el registro del servidor en la lista general
          ansible.builtin.set_fact:
            update_status: "{{ update_status + [server_log] }}"
      always: true

    - name: Marcar el estado global como fallido si algún servidor falló
      ansible.builtin.set_fact:
        global_status: "failed"
      when: server_log.status == "Failed"

    - name: Registrar la variable final con el estado de todos los servidores
      ansible.builtin.set_stats:
        data:
          update_status: "{{ update_status }}"
          global_status: "{{ global_status }}"

    - name: Depurar contenido de update_status
      ansible.builtin.debug:
        var: update_status

    - name: Depurar contenido de failed_servers
      ansible.builtin.debug:
        var: global_status
